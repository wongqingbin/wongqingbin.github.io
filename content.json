{"meta":{"title":"Frieza","subtitle":"","description":"","author":"Wang QingBin","url":"https://wongqingbin.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2021-06-08T15:07:54.984Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"404.html","permalink":"https://wongqingbin.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 向博主反馈问题"},{"title":"个人简介","date":"2021-06-08T15:07:54.984Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"about/index.html","permalink":"https://wongqingbin.github.io/about/index.html","excerpt":"王庆彬","text":"王庆彬 个人信息 性 别：男 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp; 年 龄：1992年 手 机：xxxxxxxxxxx &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;&ensp; 邮 箱：714227638@qq.com 专 业：网络工程 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp; 学 历：全日制·本科·学士 工作经历 京东数科&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp; 2020.06.15~~至今&emsp;&emsp;&emsp;&emsp;&ensp; 技术产品部-AI产品部 &emsp;&emsp;&emsp;&emsp;&emsp;&ensp; 测试开发工程师 京东数科&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp; 2019.11.11~~2020.06.15&emsp;&ensp; 智能技术部-智能产品研发组 &emsp;&emsp;&ensp; 测试开发工程师 北京四中网校&emsp;&emsp;&emsp;&emsp;&ensp; 2015.04.15~~2019.11.11&emsp;&ensp; 研发部-移动测试组 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp; 测试工程师 专业技能 Python Vue Shell Java 个人成就 个人博客：https://github.com/wongqingbin/blog GitHub：https://github.com/wongqingbin 开源项目：https://github.com/52clover 项目经历获奖经历自我评价联系博主"},{"title":"Android SDK","date":"2021-06-08T15:07:54.984Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"adb/index.html","permalink":"https://wongqingbin.github.io/adb/index.html","excerpt":"","text":"Android SDK SDK:(software development kit) &nbsp;&nbsp;&nbsp;&nbsp;被软件开发工程师用于为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件的开发工具的集合。因此，Android SDK 指的是Android专属的软件开发工具包。 Start Learning"},{"title":"所有分类","date":"2021-06-08T15:07:54.984Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"categories/index.html","permalink":"https://wongqingbin.github.io/categories/index.html","excerpt":"","text":""},{"title":"Contributors「鸣谢」","date":"2021-06-08T15:07:54.984Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"contributors/index.html","permalink":"https://wongqingbin.github.io/contributors/index.html","excerpt":"","text":"特别鸣谢 hexo 开发者和 volantis 开发者！ Hexo volantis"},{"title":"我的朋友们","date":"2021-06-08T15:07:54.984Z","updated":"2021-06-08T15:07:54.984Z","comments":false,"path":"friends/index.html","permalink":"https://wongqingbin.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"","date":"2021-06-08T15:07:54.984Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"list/index.html","permalink":"https://wongqingbin.github.io/list/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-05-20T15:25:38.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"msgboard/index.html","permalink":"https://wongqingbin.github.io/msgboard/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-06-08T15:07:54.984Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"tags/index.html","permalink":"https://wongqingbin.github.io/tags/index.html","excerpt":"","text":""},{"title":"aapt","date":"2020-06-14T11:09:07.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"adb/aapt/index.html","permalink":"https://wongqingbin.github.io/adb/aapt/index.html","excerpt":"","text":"aapt获取apk信息info1aapt dump badging &lt;apk_path&gt;"},{"title":"2. 连接调试","date":"2020-05-17T08:02:45.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"adb/debug/index.html","permalink":"https://wongqingbin.github.io/adb/debug/index.html","excerpt":"","text":"win12345678910# 什么进程占用了 5037netstat -ano | findstr \"5037\"# 结果显示进程PID 21152（示例）# 查看进程是哪个程序启动的这个进程（21152为进程PID）tasklist | findstr \"21152\"#结果显示 某个服务# 杀进程taskkill /f /pid 21152 mac1234567891011# 什么进程占用了 5037netstat -an|grep 5037# 查看进程是哪个程序启动的这个进程（21152为进程PID）lsof -i :5037# 杀进程(PID为53067的进程)kill -9 53067# psps -ef | grep 5037"},{"title":"3. apk安装&卸载","date":"2020-05-17T12:35:53.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"adb/installapk/index.html","permalink":"https://wongqingbin.github.io/adb/installapk/index.html","excerpt":"","text":"安装(adb install)1234567891011121314# 普通安装adb install &lt;apk_path&gt;# 覆盖安装adb install -r &lt;apk_path&gt;# 安装debug包adb install -t &lt;apk_path&gt;# 降级安装adb install -d &lt;apk_path&gt; # 只针对debug包，对release包无效# 针对特定设备安装(多设备同时连接电脑时)adb -s &lt;devices_id&gt; install &lt;apk_path&gt; 卸载(adb uninstall)12345# 普通卸载adb uninstall &lt;package_name&gt; # 例如: com.jd.xxx# 针对特定设备卸载(多设备同时连接电脑时)adb -s &lt;devices_id&gt; uninstall &lt;package_name&gt; # 例如: com.jd.xxx 自动化下的安装卸载(pm命令)12345# 安装apkpm install &lt;device_apk_path&gt; # device_apk_path为手机路径 /sdcard# 卸载apkpm install &lt;package_name&gt; # 例如: com.jd.xxx pm 更多用法"},{"title":"4. 玩转pm命令","date":"2020-05-17T13:05:23.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"adb/pm/index.html","permalink":"https://wongqingbin.github.io/adb/pm/index.html","excerpt":"","text":"导出已安装APP的apk文件123456# 获取包名adb shell pm list package# 获取已安装APP的apk文件路径adb shell pm path &lt;package&gt;# 导出apk文件adb pull &lt;path&gt; /Destkop 获取设备app包名称列表1adb shell pm list package # 列出安装在设备上应用的包名 获取设备app包名称列表, 只显示系统应用1adb shell pm list package -s # 列出安装在设备上应用的包名 获取设备app包名称列表, 只显示三方应用1adb shell pm list package -3 # 列出安装在设备上应用的包名 列出应用包名及对应的apk名及存放位置1adb shell pm list package -f # 列出安装在设备上应用的包名 列出应用包名及其安装来源1adb shell pm list package -i 查看APP详细信息1adb shell pm dump &lt;package_name&gt; # 例如：com.jd.xxxx 安装apk1adb shell pm install &lt;apk_path&gt; # 目标 apk 存放于 Android 设备上(，请用 pm install 安装) 卸载apk1adb shell pm uninstall &lt;package_name&gt; 清除APP数据和缓存1adb shell pm clear &lt;package_name&gt; 重置所有APP权限1adb shell pm reset 查看帮助文档1adb shell pm"},{"title":"1. SDK下载安装","date":"2020-05-17T06:59:42.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"adb/sdk/index.html","permalink":"https://wongqingbin.github.io/adb/sdk/index.html","excerpt":"","text":"下载Android SDK下载地址：https://www.androiddevtools.cn官方地址：http://developer.android.com/sdk点击Android SDK工具，选择SDK，按不同系统下载对应版本 安装Android SDK打开Android SDK文件夹，点击SDK Manager，只勾选platform-tools、build-tools、tools三个工具安装即可 环境变量配置1234567# win 编辑环境变量ANDROID_HOME=&lt;android-sdk的path目录路径&gt; # 新增ANDROID_HOMEPATH=$ANDROID_HOME/bin;$ANDROID_HOME/platform-tools;$ANDROID_HOME/build-tools;$ANDROID_HOME/tools# mac 修改.bashrc或.zshrc(zsh使用者)export ANDROID_HOME=&lt;android-sdk的path目录路径&gt;export CLASSPATH=.:$ANDROID_HOME/bin;$ANDROID_HOME/platform-tools;$ANDROID_HOME/build-tools;$ANDROID_HOME/tools"},{"title":"获取设备分辨率","date":"2020-06-14T11:05:42.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"adb/size/index.html","permalink":"https://wongqingbin.github.io/adb/size/index.html","excerpt":"","text":"获取分辨率123adb shell wm size# oradb shell \"dumpsys window | grep mUnrestrictedScreen\""},{"title":"获取apk启动类类名","date":"2020-06-14T11:00:22.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"adb/start/index.html","permalink":"https://wongqingbin.github.io/adb/start/index.html","excerpt":"","text":"获取APP启动类名12345# 1. 手机启动APP，然后输入一下命令获取当前运行APP的类名adb shell dumpsys activity | grep \"mFocusedActivity\"# 2 从日志中获取adb shell logcat *:S ActivityManager:V"},{"title":"简介","date":"2020-08-09T12:28:52.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/appium/index.html","permalink":"https://wongqingbin.github.io/wqb/appium/index.html","excerpt":"摘要","text":"摘要 正文appium 联系博主"},{"title":"简介","date":"2020-08-22T17:44:11.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/docker/index.html","permalink":"https://wongqingbin.github.io/wqb/docker/index.html","excerpt":"摘要","text":"摘要 正文 联系博主"},{"title":"常用命令","date":"2020-08-22T17:51:37.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/docker/info.html","permalink":"https://wongqingbin.github.io/wqb/docker/info.html","excerpt":"","text":"images镜像操作1234567891011121314# 显示images列表docker images# 删除&lt;none&gt;镜像, 清理所有none镜像docker images prune# 删除指定镜像docker rmi redis:6.0 # redis:6.0 == REPOSITORY:TAG# 构建镜像Dockerfiledocker build -t images_name:images_tag_version .# 运行镜像docker run --name test -dp 5000:5000 httpaitest:v1.0 # -d 后台运行返回ID， -p指定端口映射docker start &lt;CONTAINER ID&gt;docker restart &lt;CONTAINER ID&gt;docker stop &lt;CONTAINER ID&gt; container容器操作123456# 显示容器docker ps# 进入容器docker exec -it &lt;CONTAINER ID&gt; /bin/sh # /bin/sh（alpine linux） or /bin/bash# 删除容器docker rm &lt;CONTAINER ID&gt; docker镜像打包tar123456789# 1.打包安装docker save golang:latest &gt; golang.tardocker load -i golang.tar# 2.第二种方式# docker save -o 要保存的文件名 要保存的镜像docker save -o golang.tar golang:latest# docker load --input 文件 或者 docker load &lt; 文件名docker load &lt; golang.tar"},{"title":"简介","date":"2020-08-09T12:47:19.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/linux/index.html","permalink":"https://wongqingbin.github.io/wqb/linux/index.html","excerpt":"摘要","text":"摘要 正文 联系博主"},{"title":"1.pip更换国内源","date":"2020-08-09T12:12:42.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/snippet/1pip.html","permalink":"https://wongqingbin.github.io/wqb/snippet/1pip.html","excerpt":"pip修改国内源 requirements.txt","text":"pip修改国内源 requirements.txt 123# 1. 临时使用源pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn# 清华维护：https://pypi.tuna.tsinghua.edu.cn/simple 1pip freeze &gt; requirements.txt 123456789101112131415# 2. 可选国内源列表阿里云http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;中国科技大学https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;豆瓣(douban)http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;清华大学https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;中国科学技术大学http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F; 向博主反馈问题"},{"title":"2.命令行工具argparse","date":"2020-08-09T12:16:57.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/snippet/2argparse.html","permalink":"https://wongqingbin.github.io/wqb/snippet/2argparse.html","excerpt":"python使用argparse编写命令行工具","text":"python使用argparse编写命令行工具 1234567891011121314151617181920def main(): # 初始化命令行 自带 --help 参数 缩写为-h parser = argparse.ArgumentParser() # 必填参数positional arguments 位置参数 parser.add_argument('param1', help='注释内容', type=int) # 默认str类型，可变为type=int parser.add_argument('param2', help='注释内容', type=str) # 默认str类型，可变为type=int # 可选参数 缩写 全拼 parser.add_argument(\"-P\", \"--path\", help=\"注释\", type=str) # 获取命令行参数 parser.parse_args() 并赋值给args args = parser.parse_args() # 执行逻辑(根据参数执行对应逻辑) print(args)if __name__ == \"__main__\": main() 向博主反馈问题"},{"title":"3.多线程编程threading","date":"2020-08-09T12:19:27.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/snippet/3threading.html","permalink":"https://wongqingbin.github.io/wqb/snippet/3threading.html","excerpt":"python高级编程之多线程threading官方文档","text":"python高级编程之多线程threading官方文档 threading线程教程官方文档 简单线程1234567891011121314151617from threading import Threaddef my_thread(data='default'): for i in range(5): print(data) time.sleep(1)if __name__ == '__main__': thread_01 = Thread(target=my_thread, name='thread_01') # name自定义线程名称 thread_02 = Thread(target=my_thread, name='thread_02', args=('undefault',)) # args 使用元组传参，单个参数时需要加 (,) 将自动识别为元组 print('1.strat...') thread_01.start() print('2.strat...') thread_02.start() thread_01.join() # join作用：主线程等待子线程执行完毕后继续执行，但不阻塞其他子线程运行 thread_02.join() print('ending......') 线程加锁1234567891011121314151617181920212223242526from threading import Thread, Locklock = Lock() # Lock() 不能在线程中初始化，要在线程前先初始化def my_thread(data='default'): for i in range(5): lock.acquire() print(data) lock.release() time.sleep(1)if __name__ == '__main__': thread_01 = Thread(target=my_thread, name='thread_01') # name自定义线程名称 thread_02 = Thread(target=my_thread, name='thread_02', args=('undefault',)) # args 使用元组传参，单个参数时需要加 (,) 将自动识别为元组 print('1.strat...') thread_01.start() print('2.strat...') thread_02.start() thread_01.join() # join作用：主线程等待子线程执行完毕后继续执行，但不阻塞其他子线程运行 thread_02.join() print('ending......')#### 线程加锁前，在控制台打印的日志会有重叠，加锁后解决；# 锁机制主要用来对操作共享数据的模块前后加锁，实现数据共享而不乱### 类线程继承，实现多线程12345678910111213141516171819202122232425262728293031323334353637from threading import Thread, Locklock = Lock() # Lock() 不能在线程中初始化，要在线程前先初始化def my_thread(data='default'): for i in range(5): lock.acquire() print(data) lock.release() time.sleep(1)class MyThread(Thread): def __init__(self, data='default'): super().__init__() self.name = name def run(self): print(self.ident) # lock.acquire() 可在重新run方法中直接加锁 my_thread(self.name) # lock.release() 可在重新run方法中直接解锁if __name__ == '__main__': thread_03 = MyThread() thread_04 = MyThread(data='undefault') thread_03.start() thread_04.start() thread_03.join() thread_04.join() print('ending......')#### 类实现线程：1.必须继承threading.Thread类；2.必须重写run方法来实现多线程模块### 向博主反馈问题"},{"title":"4.sqlite3封装","date":"2020-08-09T12:20:27.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/snippet/4sqlite3.html","permalink":"https://wongqingbin.github.io/wqb/snippet/4sqlite3.html","excerpt":"python3使用Sqlite3本地数据库存储数据","text":"python3使用Sqlite3本地数据库存储数据 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import sqlite3def dict_factory(cursor, row): d = &#123;&#125; for idx, col in enumerate(cursor.description): d[col[0]] = row[idx] return dclass Demo(object): def __init__(self): super(Demo, self).__init__() self.conn = sqlite3.connect('test.db') def create(self): with self.conn: self.conn.execute('''CREATE TABLE COMPANY (ID INT PRIMARY KEY NOT NULL, NAME TEXT NOT NULL, AGE INT NOT NULL, ADDRESS CHAR(50), SALARY REAL);''' ) def insert(self): with self.conn: self.conn.execute(\"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \\ VALUES (5, 'Paul', 32, 'California', 20000.00 )\") def select(self): self.conn.row_factory = dict_factory # 查询数据结果返回为字典：[&#123;&#125;,&#123;&#125;] c = self.conn.cursor() c.execute(\"SELECT id, name, address, salary from COMPANY\") print(c.fetchall()) # [&#123;key: value, key: value&#125;, &#123;...&#125;, &#123;...&#125;] print(c.fetchone()) # [&#123;key: value, key: value&#125;] return c.fetchall() # List[Dict] def update(self): with self.conn: self.conn.execute(\"UPDATE COMPANY set SALARY = 25000.00 where ID=1\") def delete(self): with self.conn: self.conn.execute(\"DELETE from COMPANY where ID=2;\") def __del__(self): self.conn.close()if __name__ == '__main__': obj = Demo() # obj.create() # obj.insert() obj.select() # obj.update() # obj.delete() 向博主反馈问题"},{"title":"5.SQLAlchemy","date":"2020-09-05T17:11:52.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/snippet/5SQLAlchemy.html","permalink":"https://wongqingbin.github.io/wqb/snippet/5SQLAlchemy.html","excerpt":"python3使用SQLAlchemy对mysql数据类型的映射关系表","text":"python3使用SQLAlchemy对mysql数据类型的映射关系表 数据类型关系表 类型名 MySQL类型 python类型 描述 SmallInteger smallint int 取值范围较小，一般为16位 Integer int int 普通整数，一般32位 BigInteger bigint int/long 不限精度的整数 Float float float 浮点数 Numeric decimal decimal.Decimal 定点数 String varchar str 变长字符串 Text tinytext str 变长字符串，64K Text(65536) mediumtext str 变长字符串，max16M Text(16777216) longtext str 变长字符串，max32M LargeBinary blob str 二进制文件，64K LargeBinary(65536) mediumblob str 二进制，max16M LargeBinary(16777216) longblob str 二进制，max32M PickleType blob 任何python对象 自动使用Pickle序列化，只有blob，存json数据 Unicode varchar unicode 变长字符串 UnicodeText text unicode 变长字符串，64K Boolean tinyint bool 布尔值 Date date datetime.date 日期 Time time date.time 时间 DateTime datetime datetime.datetime 日期和时间 Interval datetime datetime.timedelta 时间间隔 Enum enum str 一组字符串 字段设置对照表 属性 描述 生效值 primary_key 主键 True unique 键值唯一性 True index 索引 True nullable 空值 True default 默认值 null python代码示例12345678910111213141516171819202122232425262728class Data(db.Model): __tablename__ = \"datas\" id = db.Column(db.Integer, primary_key=True) smallInteger = db.Column(db.SmallInteger) bigInteger = db.Column(db.BigInteger) floatData = db.Column(db.Float(10)) numericData = db.Column(db.Numeric(10)) stringData = db.Column(db.String(250)) textData = db.Column(db.Text(200)) mediumText = db.Column(db.Text(65536)) longText = db.Column(db.Text(16777216)) largeBinary = db.Column(db.LargeBinary(300)) mediumBlob = db.Column(db.LargeBinary(65536)) longBlob = db.Column(db.LargeBinary(16777216)) pickle = db.Column(db.PickleType) mediumPickle = db.Column(db.PickleType(65536)) longPickle = db.Column(db.PickleType(16777216)) unicodeData = db.Column(db.Unicode(10)) unicodeText = db.Column(db.UnicodeText) booleanData = db.Column(db.Boolean(0)) dateData = db.Column(db.Date) timeData = db.Column(db.Time) dateTime = db.Column(db.DateTime) interval = db.Column(db.Interval) enumData = db.Column(db.Enum('father', 'mother')) def __repr__(self): return \"Data &#123;&#125;\".format(self.id)"},{"title":"6.策略模式","date":"2021-06-08T13:58:59.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/snippet/6strategy.html","permalink":"https://wongqingbin.github.io/wqb/snippet/6strategy.html","excerpt":"python3策略模式","text":"python3策略模式 类方式实现策略模式(静态策略)1234567891011121314151617181920212223class StrategyExecutor(): def __init__(self, func=None): if func is not None: self.execute = func def execute(self, *args): print(\"Strategy not implemented\") def strategy_addition(arg1, arg2): print(arg1 + arg2) def strategy_subtraction(arg1, arg2): print(arg1 - arg2)def main(): no_strategy = StrategyExecutor() addition strategy - Strategyexecutor (strategy_addition) subtraction_strategy = StrategyExecutor (strategy_subtraction) no_strategy.execute(4, 6) addition_strategy,execute(4, 6) subtraction_strategy.execute(4, 6)if __name__ == \"__main__\": main() 函数嵌套方式实现策略模式(动态策略)123456789101112def executor(arg1, arg2, func=None): if func is None: return \"Strategy not implemented\" return func(arg1, arg2)def strategy_1(arg1, arg2): return f_1(arg1, arg2)def strategy_2(arg1, arg2): return f_2(arg1, arg2)"},{"title":"简介","date":"2020-06-14T08:56:56.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/snippet/index.html","permalink":"https://wongqingbin.github.io/wqb/snippet/index.html","excerpt":"摘要","text":"摘要 正文 联系博主"},{"title":"简介","date":"2020-08-09T12:44:22.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/sql/index.html","permalink":"https://wongqingbin.github.io/wqb/sql/index.html","excerpt":"摘要","text":"摘要 正文 联系博主"},{"title":"简介","date":"2020-08-09T12:40:02.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"wqb/vue/index.html","permalink":"https://wongqingbin.github.io/wqb/vue/index.html","excerpt":"摘要","text":"摘要 正文 联系博主"}],"posts":[{"title":"回滚版本号","slug":"git/reset","date":"2020-08-10T15:21:38.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vp002efmnignrn91kf/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vp002efmnignrn91kf/","excerpt":"git回退版本并强制提交至远程仓库","text":"git回退版本并强制提交至远程仓库 1234567# 本地回退命令git reset --hard HEAD^ # 回退到上个版本git reset --hard HEAD~3 # 回退到前3次提交之前，以此类推，回退到n次提交之前git reset --hard commit_id # 退到/进到 指定commit的sha码(git log查看commit)# 强推推送到远程仓库git push origin HEAD --force 向博主反馈问题","categories":[{"name":"Git","slug":"Git","permalink":"https://wongqingbin.github.io/categories/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://wongqingbin.github.io/tags/git/"}]},{"title":"pip修改源","slug":"python/pip","date":"2020-08-09T10:59:54.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1w00037fmni7bzugbuj/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1w00037fmni7bzugbuj/","excerpt":"pip修改国内源 requirements.txt","text":"pip修改国内源 requirements.txt 123# 1. 临时使用源pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn# 清华维护：https://pypi.tuna.tsinghua.edu.cn/simple 1pip freeze &gt; requirements.txt 123456789101112131415# 2. 可选国内源列表阿里云http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;中国科技大学https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;豆瓣(douban)http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;清华大学https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;中国科学技术大学http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F; 向博主反馈问题","categories":[{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/categories/python/"}],"tags":[{"name":"pip","slug":"pip","permalink":"https://wongqingbin.github.io/tags/pip/"}]},{"title":"npm更换国内源","slug":"vue/npm","date":"2020-08-08T11:12:47.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1w7003qfmnia6ab3wk6/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1w7003qfmnia6ab3wk6/","excerpt":"npm更换阿里源","text":"npm更换阿里源 1234# 查看npm的地址源npm config get registry # 或 npm info express# 修改npm的地址源为淘宝源 无需安装cnpmnpm config set registry https://registry.npm.taobao.org --global 12# 安装cnpm,cnpm默认使用淘宝源npm install -g cnpm --registry=http://registry.npm.taobao.org 向博主反馈问题","categories":[{"name":"vue","slug":"vue","permalink":"https://wongqingbin.github.io/categories/vue/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://wongqingbin.github.io/tags/npm/"}]},{"title":"mac安装mysql8.0","slug":"sql/mysql","date":"2020-08-08T11:05:27.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1w5003kfmni4e9scpqt/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1w5003kfmni4e9scpqt/","excerpt":"Mac安装mysql8.0版本","text":"Mac安装mysql8.0版本 安装12345# Mac安装MySQLbrew install mysqlmysql.server startmysql_secure_installationOK 基本操作123456# 启动 mysql, 并设置为开机启动brew services start mysql# 关闭 mysqlbrew services stop mysql# 重启 mysqlbrew services restart mysql 安装过程详情记录1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#### mysql_secure_installation #### 步骤详解Securing the MySQL server deployment.Connecting to MySQL using a blank password.VALIDATE PASSWORD COMPONENT can be used to test passwordsand improve security. It checks the strength of passwordand allows the users to set only those passwords which aresecure enough. Would you like to setup VALIDATE PASSWORD component?Press y|Y for Yes, any other key for No: y //使用密码验证There are three levels of password validation policy: LOW Length &gt;= 8MEDIUM Length &gt;= 8, numeric, mixed case, and special charactersSTRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary filePlease enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 0 // 选择密码验证等级Please set the password for root here.New password: // 输入新密码Re-enter new password: Estimated strength of the password: 50 Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them. This is intended only fortesting, and to make the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? (Press y|Y for Yes, any other key for No) : y //删除匿名用户Success.Normally, root should only be allowed to connect from'localhost'. This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n // 是否禁止远程登录 ... skipping.By default, MySQL comes with a database named 'test' thatanyone can access. This is also intended only for testing,and should be removed before moving into a productionenvironment.Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y // 是否删除测试库 - Dropping test database...Success. - Removing privileges on test database...Success.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y // 刷新数据库权限Success.All done! // 完成 修改root密码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# mysql5.7.9 及更高版本修改root密码方式# 1.开启mysql跳过密码登录mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;# 2.命令运行后，重新开启命令行窗口进行下面操作mysql -u root -p# NOTE：不用输入密码直接点击enter# 3.切换数据库，使用mysql库use mysql;# 4.查询user用户表，查看用户民和密码select host, user, authentication_string, plugin from user; # 查询表语句# 5.如果user表中的root用户的authentication_string字段有值，则清空update user set authentication_string='' where user='root';# 6.修改root用户的密码 ALTER user 'root'@'localhost' IDENTIFIED BY 'admin123456';###################################################################################### 5.7.9以下版本修改root密码方式，只是修改的语句不一样use mysql;update user set password=PASSWORD('admin123456') where user='root';# mac上brew安装mysql更改数据存储位置# 1、创建数据存储目录mkdir /data/mysqldb# 2、移动或复制数据库文件sudo cp -rp /usr/local/var/mysql /data/mysqldb# 3、修改配置文件vim /usr/local/etc/my.cnf ## Default Homebrew MySQL server config # [mysqld]## Only allow connections from localhost# bind-address = 127.0.0.1## data file path# datadir=/data/mysqldb# 4、查看数据文件存储目录mysqladmin -u root -p variables | grep datadir# 用Navicat root用户连接时，会报如下错误：Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen/usr/local/mysql/lib/plugin/caching_sha2_password.so 2: image not found# ----------原因：# mysql 8.0 及以后版本的默认加密方式变了，变成了 caching_sha2_password# mysql 8.0 之前 版本的默认加密方式是 mysql_native_password# ----------解决办法# 修改root用户的加密方式为 mysql_native_passwordALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'rootPASSWORD';# mysql创建一个新用户，设置密码加密方式为 mysql_native_password，并授予其所有权限CREATE USER 'newUser'@'localhost' IDENTIFIED WITH mysql_native_password BY 'newPassWord';GRANT ALL PRIVILEGES ON *.* TO 'newUser'@'localhost';# 上述用户名后面跟的是localhost，目的是只允许连到本地才能进行访问，不能远程访问，如何才能远程访问？# 用%替换localhost，如下：CREATE USER 'newUser'@'%' IDENTIFIED WITH mysql_native_password BY 'newPassWord';GRANT ALL PRIVILEGES ON *.* TO 'newUser'@'%'; 向博主反馈问题","categories":[{"name":"sql","slug":"sql","permalink":"https://wongqingbin.github.io/categories/sql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://wongqingbin.github.io/tags/mysql/"}]},{"title":"元素定位","slug":"appium/元素定位","date":"2020-08-08T10:57:07.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vl0022fmni48fu3zkz/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vl0022fmni48fu3zkz/","excerpt":"appium元素定位","text":"appium元素定位 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259# Selenium元素定位find_element_by_idfind_element_by_namefind_element_by_xpathfind_element_by_link_textfind_element_by_partial_link_textfind_element_by_tag_namefind_element_by_class_namefind_element_by_css_selector# appium元素定位# find_element_by_ios_uiautomation()# find_element_by_android_uiautomator(&quot;xx&quot;)driver.find_element_by_id(&quot;id&quot;) # id定位driver.find_element_by_name(&quot;name&quot;) # name定位driver.find_element_by_link_text(&quot;text&quot;) # 链接名定位driver.find_element_by_partial_link_text(&quot;text&quot;) # 通过元素部分可见链接文本定位driver.find_element_by_tag_name(&quot;name&quot;) # 通过查找html的标签名称定位元素driver.find_element_by_xpath(&quot;xpath&quot;) # 路径定位driver.find_element_by_class_name(&quot;android.widget.LinearLayout&quot;) # 类名定位driver.find_element_by_css_selector(&quot;css&quot;) # css选择器定位# 1.appium获取content-desc文本值用element.get_attribute(&#39;name&#39;);# 2.appium获取text属性的文本值用element.text或者element.get_attribute(&#39;text&#39;);# 3.appium中属性值对应的定位方式：# text-&gt;find_element_by_name# resource_id-&gt;find_element_by_id# class-&gt;find_element_by_class_name# content-desc-&gt;find_element_by_accessibility_idglobal driver# 元素定位driver.find_element_by_id(&quot;id&quot;) # id定位driver.find_element_by_name(&quot;name&quot;) # name定位driver.find_element_by_link_text(&quot;text&quot;) # 链接名定位driver.find_element_by_partial_link_text(&quot;text&quot;) # 通过元素部分可见链接文本定位driver.find_element_by_tag_name(&quot;name&quot;) # 通过查找html的标签名称定位元素driver.find_element_by_xpath(&quot;xpath&quot;) # 路径定位driver.find_element_by_class_name(&quot;android.widget.LinearLayout&quot;) # 类名定位driver.find_element_by_css_selector(&quot;css&quot;) # css选择器定位# 元素集合复数定位driver.find_elements_by_id(&quot;id&quot;) # id元素集合driver.find_elements_by_name(&quot;name&quot;) # name元素集合driver.find_elements_by_link_text(&quot;text&quot;) # 链接名元素集合driver.find_elements_by_partial_link_text(&quot;text&quot;) # 部分元素可见链接集合driver.find_elements_by_tag_name(&quot;name&quot;) # html标签名集合driver.find_elements_by_xpath(&quot;xpath&quot;) # 路径定位集合driver.find_elements_by_class_name(&quot;android.widget.LinearLayout&quot;) # 类名定位集合driver.find_elements_by_css_selector(&quot;css&quot;) # css选择器定位集合# 输入框输入driver.element.send_keys(&quot;中英&quot;)# 锁定屏幕driver.lock(5)# 把当前应用置于后台driver.background_app(5)# 收起键盘driver.hide_keyboard()# 打开一个应用或者activity，仅安卓端driver.start_activity(&#39;com.example.android.apis&#39;, &#39;.Foo&#39;)# 打开下拉通知栏 仅Androiddriver.open_notifications()# 拖动元素，将元素origin_el拖到目标元素destination_eldriver.drag_and_drop(self, origin_el, destination_el):# 检查app是否已安装driver.is_app_installed(&#39;com.example.android.apis&#39;)# 安装应用到设备driver.install_app(&#39;path&#x2F;to&#x2F;my.apk&#39;)# 删除应用driver.remove_app(&#39;com.example.android.apis&#39;)# 模拟设备摇晃driver.shake()# 关闭应用driver.close_app()# 启动 (Launch)# 根据服务关键字 (desired capabilities) 启动会话 (session) 。请注意这必须在设定 autoLaunch&#x3D;false 关键字时才能生效。# 这不是用于启动指定的 app&#x2F;activities ————你可以使用 start_activity 做到这个效果————# 这是用来继续进行使用了 autoLaunch&#x3D;false 关键字时的初始化 (Launch) 流程的。driver.launch_app()# 应用重置，相当于重新卸载安装driver.reset()# 可用上下文 (context) 列出所有的可用上下文# 翻译备注：context可以理解为 可进入的窗口 。例如，对于原生应用，可用的context和默认context均为NATIVE_APP。# 详情可查看对混合应用进行自动化测试driver.contexts# 列出当前上下文driver.current_context# 切换到默认的上下文 (context)# 将上下文切换到默认上下文driver.switch_to.context(None)# 获取应用的字符串driver.app_strings# 按键事件 (Key Event)给设备发送一个按键事件driver.keyevent(176)# 获取当前的activitydriver.current_activity# 触摸动作(TouchAction) &#x2F; 多点触摸动作(MultiTouchAction)action &#x3D; TouchAction(driver)action.press(element&#x3D;el, x&#x3D;10, y&#x3D;10).release().perform()# 滑动(Swipe)模拟用户滑动# 注意：appium滑动规则是x从左到右变大，y从上到下变大driver.swipe(start&#x3D;75, starty&#x3D;500, endx&#x3D;75, endy&#x3D;0, duration&#x3D;800)# 捏 (Pinch)捏屏幕 (双指往内移动来缩小屏幕)driver.pinch(element&#x3D;el)# 放大 (Zoom)放大屏幕 (双指往外移动来放大屏幕)driver.zoom(element&#x3D;el)# 滑动到某个元素 (Scroll To)todo: python# 从设备中拉出文件 (Pull File)driver.pull_file(&#39;Library&#x2F;AddressBook&#x2F;AddressBook.sqlitedb&#39;)# 推送文件到设备中去data &#x3D; &quot;some data for the file&quot;path &#x3D; &quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;file.txt&quot;driver.push_file(path, data.encode(&#39;base64&#39;))# 断言Assert.assertEquals(&quot;I am a div&quot;, div.getText()); &#x2F;&#x2F;跳转到指定页面并在该页面所以用元素id进行交互# 检查文本是否符合预期assertEqual(&#39;I am a div&#39;, div.text)# 输入法是否有活动 返回真假is_ime_active(self):# 返回当前安卓设备可用的输入法driver.available_ime_engines(self):# 激活安卓设备中的制定输入法driver.activate_ime_engine(self, engine):# 关闭当前的输入法（android）driver.deactivate_ime_engine(self):# 打开安卓设备上的位置定位设置driver.toggle_location_services()# 设置设备的经纬度 :Args: - latitude纬度 - String or numeric value between -90.0 and 90.00 - longitude经度 - String or numeric value between -180.0 and 180.0 - altitude海拔高度- String or numeric value用法 driver.set_location(纬度，经度，高度)# 点击element.click()# 清除元素内容element.clear()# 返回元素的文本内容element.text()# 提交表单element.submit(self):# 元素是否可用element.is_enabled()# 元素是否可选element.is_slected()# 元素是否可见element.is_displayed()# 获取元素的大小（高和宽）new_size[&quot;height&quot;] &#x3D; size[&quot;height&quot;]new_size[&quot;width&quot;] &#x3D; size[&quot;width&quot;]driver.element.size# 获取元素左上角的坐标# 用法 driver.element.location&#39;&#39;&#39;返回element的x坐标, int类型&#39;&#39;&#39;driver.element.location.get(&#39;x&#39;)&#39;&#39;&#39;返回element的y坐标, int类型&#39;&#39;&#39;driver.element.location.get(&#39;y&#39;)# 获取当前元素的截图为Base64编码的字符串img_b64 &#x3D; element.screenshot_as_base64# 执行JS# 在当前窗口&#x2F;框架（特指 Html 的 iframe ）同步执行 javascript 代码driver.execute_script(&#39;document.title&#39;)# 异步执行代码，其他代码在执行driver.execute_async_script(&#39;document.title&#39;)# 获取当前urldriver.current_url# 获取页面源driver.page_source# 关闭当前窗口driver.close()# 关闭应用driver.quit()# chrome上进行测试&#123;&#39;platformName&#39;: &#39;Android&#39;,&#39;platformVersion&#39;: &#39;4.4&#39;,&#39;deviceName&#39;: &#39;Android Emulator&#39;,&#39;browserName&#39;: &#39;Chrome&#39;&#125;# 真机测试&#123;&#39;automationName&#39;: &#39;Selendroid&#39;,&#39;platformName&#39;: &#39;Android&#39;,&#39;platformVersion&#39;: &#39;2.3&#39;,&#39;deviceName&#39;: &#39;Android Emulator&#39;,&#39;app&#39;: myApp,&#39;appPackage&#39;: &#39;com.mycompany.package&#39;,&#39;appActivity&#39;: &#39;.MainActivity&#39;&#125;# 多点触控&quot;&quot;&quot;规范中的可用事件有：* 短按 (press)* 释放 (release)* 移动到 (moveTo)* 点击 (tap)* 等待 (wait)* 长按 (longPress)* 取消 (cancel)* 执行 (perform)&quot;&quot;&quot; 向博主反馈问题","categories":[{"name":"appium","slug":"appium","permalink":"https://wongqingbin.github.io/categories/appium/"}],"tags":[{"name":"appium","slug":"appium","permalink":"https://wongqingbin.github.io/tags/appium/"}]},{"title":"编写命令行工具","slug":"python/argparse","date":"2020-08-08T10:45:24.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vw002xfmni2dkjgf3p/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vw002xfmni2dkjgf3p/","excerpt":"python使用argparse编写命令行工具","text":"python使用argparse编写命令行工具 1234567891011121314151617181920def main(): # 初始化命令行 自带 --help 参数 缩写为-h parser = argparse.ArgumentParser() # 必填参数positional arguments 位置参数 parser.add_argument('param1', help='注释内容', type=int) # 默认str类型，可变为type=int parser.add_argument('param2', help='注释内容', type=str) # 默认str类型，可变为type=int # 可选参数 缩写 全拼 parser.add_argument(\"-P\", \"--path\", help=\"注释\", type=str) # 获取命令行参数 parser.parse_args() 并赋值给args args = parser.parse_args() # 执行逻辑(根据参数执行对应逻辑) print(args)if __name__ == \"__main__\": main() 向博主反馈问题","categories":[{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/categories/python/"}],"tags":[{"name":"argparse","slug":"argparse","permalink":"https://wongqingbin.github.io/tags/argparse/"}]},{"title":"python封装sqlite3","slug":"python/sqlite","date":"2020-08-08T10:38:01.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1w10038fmnigj85gxwy/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1w10038fmnigj85gxwy/","excerpt":"python3使用Sqlite3本地数据库存储数据","text":"python3使用Sqlite3本地数据库存储数据 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import sqlite3def dict_factory(cursor, row): d = &#123;&#125; for idx, col in enumerate(cursor.description): d[col[0]] = row[idx] return dclass Demo(object): def __init__(self): super(Demo, self).__init__() self.conn = sqlite3.connect('test.db') def create(self): with self.conn: self.conn.execute('''CREATE TABLE COMPANY (ID INT PRIMARY KEY NOT NULL, NAME TEXT NOT NULL, AGE INT NOT NULL, ADDRESS CHAR(50), SALARY REAL);''' ) def insert(self): with self.conn: self.conn.execute(\"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \\ VALUES (5, 'Paul', 32, 'California', 20000.00 )\") def select(self): self.conn.row_factory = dict_factory # 查询数据结果返回为字典：[&#123;&#125;,&#123;&#125;] c = self.conn.cursor() c.execute(\"SELECT id, name, address, salary from COMPANY\") print(c.fetchall()) # [&#123;key: value, key: value&#125;, &#123;...&#125;, &#123;...&#125;] print(c.fetchone()) # [&#123;key: value, key: value&#125;] return c.fetchall() # List[Dict] def update(self): with self.conn: self.conn.execute(\"UPDATE COMPANY set SALARY = 25000.00 where ID=1\") def delete(self): with self.conn: self.conn.execute(\"DELETE from COMPANY where ID=2;\") def __del__(self): self.conn.close()if __name__ == '__main__': obj = Demo() # obj.create() # obj.insert() obj.select() # obj.update() # obj.delete() 向博主反馈问题","categories":[{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/categories/python/"}],"tags":[{"name":"sqlite3","slug":"sqlite3","permalink":"https://wongqingbin.github.io/tags/sqlite3/"}]},{"title":"mysql指定日期的数据统计","slug":"sql/date","date":"2020-06-18T14:40:24.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1w4003ifmni5i2e24vv/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1w4003ifmni5i2e24vv/","excerpt":"SQL查询之指定日期内的数据。例如：今天、本周、本月、本季度、今年、近半年、近一个月、近7天","text":"SQL查询之指定日期内的数据。例如：今天、本周、本月、本季度、今年、近半年、近一个月、近7天 mysql有关日期条件的查询语句12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455###################################### 高版本使用CURDATE() 低版本使用NEW() ###################################### 查询今天 当天SELECT * FROM `table_name` WHERE TO_DAYS(col_name)=TO_DAYS(NEW());# 获取本周SELECT * FROM `table_name` WHERE YEARWEEK(DATE_FORMAT(col_name,'%Y-%m-%d'))=YEARWEEK(NEW());# 获取本月SELECT * FROM `table_name` WHERE DATE_FORMAT(col_name,'%Y-%m')=DATE_FORMAT(NEW(),'%Y-%m');# 获取本季度SELECT * FROM `table_name` WHERE QUARTER(col_name)=QUARTER(NEW());# 获取本年SELECT * FROM `table_name` WHERE YEAR(col_name)=YEAR(NEW());################################################################################# 获取某年某月的数据, 第二种方式更常用DATE_FORMATSELECT * FROM `table_name` WHERE YEAR(col_name)=2020 AND MONTH(col_name)=6;SELECT * FROM `table_name` WHERE DATE_FORMAT(col_name,'%Y-%m')='2020-06'; # %Y-%m对应2020-06 %Y-%c对应2020-6 区别0################################################################################# 获取近1月SELECT * FROM `table_name` WHERE DATE_SUB(NEW(), INTERVAL 1 MONTH) &lt;= DATE(col_name);# 获取近1星期 或 近7天数据SELECT * FROM `table_name` WHERE DATE_SUB(NEW(), INTERVAL 7 DAY) &lt;= DATE(col_name);# 获取近1年SELECT * FROM `table_name` WHERE YEAR(col_name)=YEAR(DATE_SUB(NEW(),INTERVAL 1 YEAR));# 获取近1季度SELECT * FROM `table_name` WHERE QUARTER(col_name)=QUARTER(DATE_SUB(NEW(),INTERVAL 1 QUARTER));########################################## 获取近半年内每个月的统计SELECT COUNT(*) as nums, DATE_FORMAT( col_name, '%Y-%m' ) as date_timeFROM `table_name`WHERE DATE_SUB( NEW(), INTERVAL 6 MONTH ) &lt;= DATE( col_name )GROUP BY date_time;# 打印结果 ################# nums | data_time# 10 | 2020-01# 50 | 2020-02# 90 | 2020-03# 30 | 2020-04################################################################################### 数据库日期类型使用 datetime 即可######################################################## 向博主反馈问题","categories":[{"name":"sql","slug":"sql","permalink":"https://wongqingbin.github.io/categories/sql/"}],"tags":[{"name":"countdate","slug":"countdate","permalink":"https://wongqingbin.github.io/tags/countdate/"}]},{"title":"多线程编程threading","slug":"python/threading","date":"2020-06-18T14:30:35.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1w2003dfmni4ko7fuql/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1w2003dfmni4ko7fuql/","excerpt":"python高级编程之多线程threading官方文档","text":"python高级编程之多线程threading官方文档 threading线程教程官方文档 简单线程1234567891011121314151617from threading import Threaddef my_thread(data='default'): for i in range(5): print(data) time.sleep(1)if __name__ == '__main__': thread_01 = Thread(target=my_thread, name='thread_01') # name自定义线程名称 thread_02 = Thread(target=my_thread, name='thread_02', args=('undefault',)) # args 使用元组传参，单个参数时需要加 (,) 将自动识别为元组 print('1.strat...') thread_01.start() print('2.strat...') thread_02.start() thread_01.join() # join作用：主线程等待子线程执行完毕后继续执行，但不阻塞其他子线程运行 thread_02.join() print('ending......') 线程加锁1234567891011121314151617181920212223242526from threading import Thread, Locklock = Lock() # Lock() 不能在线程中初始化，要在线程前先初始化def my_thread(data='default'): for i in range(5): lock.acquire() print(data) lock.release() time.sleep(1)if __name__ == '__main__': thread_01 = Thread(target=my_thread, name='thread_01') # name自定义线程名称 thread_02 = Thread(target=my_thread, name='thread_02', args=('undefault',)) # args 使用元组传参，单个参数时需要加 (,) 将自动识别为元组 print('1.strat...') thread_01.start() print('2.strat...') thread_02.start() thread_01.join() # join作用：主线程等待子线程执行完毕后继续执行，但不阻塞其他子线程运行 thread_02.join() print('ending......')#### 线程加锁前，在控制台打印的日志会有重叠，加锁后解决；# 锁机制主要用来对操作共享数据的模块前后加锁，实现数据共享而不乱### 类线程继承，实现多线程12345678910111213141516171819202122232425262728293031323334353637from threading import Thread, Locklock = Lock() # Lock() 不能在线程中初始化，要在线程前先初始化def my_thread(data='default'): for i in range(5): lock.acquire() print(data) lock.release() time.sleep(1)class MyThread(Thread): def __init__(self, data='default'): super().__init__() self.name = name def run(self): print(self.ident) # lock.acquire() 可在重新run方法中直接加锁 my_thread(self.name) # lock.release() 可在重新run方法中直接解锁if __name__ == '__main__': thread_03 = MyThread() thread_04 = MyThread(data='undefault') thread_03.start() thread_04.start() thread_03.join() thread_04.join() print('ending......')#### 类实现线程：1.必须继承threading.Thread类；2.必须重写run方法来实现多线程模块### 向博主反馈问题","categories":[{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/categories/python/"}],"tags":[{"name":"threading","slug":"threading","permalink":"https://wongqingbin.github.io/tags/threading/"}]},{"title":"codeSnippet","slug":"snippet","date":"2020-06-14T08:56:56.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1sl0001fmnibuk96rfo/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1sl0001fmnibuk96rfo/","excerpt":"","text":"Code Snippet Let's do this &nbsp;&nbsp;&nbsp;&nbsp;测试开发人员常用的代码小片段分享，致力于实用、易懂、优雅的代码，让代码更加Pythonic。","categories":[],"tags":[]},{"title":"Python中的异常处理问题","slug":"python/exception","date":"2020-06-10T15:00:18.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vz0033fmnifvpdc2uj/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vz0033fmnifvpdc2uj/","excerpt":"Python不同于其他语言的异常处理之超级优雅的方式","text":"Python不同于其他语言的异常处理之超级优雅的方式 优雅的异常处理123456789101112try: print('这是要监控执行的代码块')except A: print('A类型异常时执行此处')except B: print('B类型异常时执行此处')except: print('其他类型异常时执行此处')else: print('try监控的代码块无异常时执行此处')finally: print('无论try代码块是否有异常均执行此处') 向博主反馈问题","categories":[{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/categories/python/"}],"tags":[{"name":"Exception","slug":"Exception","permalink":"https://wongqingbin.github.io/tags/Exception/"}]},{"title":"git rebase","slug":"git/rebase","date":"2020-06-10T14:10:42.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vo002bfmniem3gder4/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vo002bfmniem3gder4/","excerpt":"git管理代码库之git rebase变基，让代码提交历史更加清晰明了，使git log提交为一条线","text":"git管理代码库之git rebase变基，让代码提交历史更加清晰明了，使git log提交为一条线 基础用法12345678910111213# dev分支合并前先变基dev&gt; git rebase master# 如果遇到冲突，则解决完冲突后继续执行未完成的变基dev&gt; git rebase --continue# 变基完成后，切换到master分支dev&gt; git checkout master# master合并merge变基后的dev分支master&gt; git merge dev# master分支提交代码master&gt; git push# 切换回开发分支master&gt; git checkout devdev&gt; 向博主反馈问题","categories":[{"name":"Git","slug":"Git","permalink":"https://wongqingbin.github.io/categories/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://wongqingbin.github.io/tags/git/"}]},{"title":"celery和redis交互全流程解析","slug":"python/celery","date":"2020-06-03T15:51:04.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vx0031fmni8jqnef9a/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vx0031fmni8jqnef9a/","excerpt":"celery 和 redis 之间交互的基本原理","text":"celery 和 redis 之间交互的基本原理 123456789101112131415161718 celery 和 redis 之间交互的基本原理：1、当发起一个 task 时，会向 redis 的 celery key 中插入一条记录。2、如果这时有正在待命的空闲 worker，这个 task 会立即被 worker 领取。3、如果这时没有空闲的 worker，这个 task 的记录会保留在 celery key 中。4、这时会将这个 task 的记录从 key celery 中移除，并添加相关信息到 unacked 和 unacked_index 中。5、worker 根据 task 设定的期望执行时间执行任务，如果接到的不是延时任务或者已经超过了期望时间，则立刻执行。6、worker 开始执行任务时，通知 redis。（如果设置了 CELERY_ACKS_LATE &#x3D; True 那么会在任务执行结束时再通知）7、redis 接到通知后，将 unacked 和 unacked_index 中相关记录移除。8、如果在接到通知前，worker 中断了，这时 redis 中的 unacked 和 unacked_index 记录会重新回到 celery key 中。(这个回写的操作是由 worker 在 “临死” 前自己完成的，所以在关闭 worker 时为防止任务丢失，请务必使用正确的方法停止它，如: celery multi stop w1 -A proj1)9、在 celery key 中的 task 可以再次重复上述 2 以下的流程。10、celery 只是利用 redis 的 list 类型，当作个简单的 Queue，并没有使用消息订阅等功能--------------1、需要配置celery的backend，backend的作用就是存储任务执行结果。2、当celery key中的任务成功被worker认领并且执行成功，celery会向配置好的bachend中，写入以task_id为key。3、所以，可以通过查看bachend中是否有以task_id为key的对象来判断task是否执行成功。 向博主反馈问题","categories":[{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/categories/python/"}],"tags":[{"name":"celery","slug":"celery","permalink":"https://wongqingbin.github.io/tags/celery/"}]},{"title":"copy","slug":"Linux/copy","date":"2020-06-03T15:47:59.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1ux000rfmni1fiy181b/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1ux000rfmni1fiy181b/","excerpt":"图片增加容量大小使用方法","text":"图片增加容量大小使用方法 123copy 1M.jpg /b + 5M.file /b 6M.jpg# orcopy /b 1M.jpg + 5M.file 6M.jpg 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"copy","slug":"copy","permalink":"https://wongqingbin.github.io/tags/copy/"}]},{"title":"Kindle","slug":"Kindle/Kindle","date":"2020-06-02T17:20:36.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1uq000kfmni9bp42tx0/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1uq000kfmni9bp42tx0/","excerpt":"Kindle使用教程","text":"Kindle使用教程 免费电子书下载地址 http://panghubook.cn/ https://kindle.51nazhun.pub/ https://www.jiumodiary.com/ 向博主反馈问题","categories":[{"name":"Kindle","slug":"Kindle","permalink":"https://wongqingbin.github.io/categories/Kindle/"}],"tags":[{"name":"Kindle","slug":"Kindle","permalink":"https://wongqingbin.github.io/tags/Kindle/"}]},{"title":"git修改用户名密码","slug":"git/git","date":"2020-05-26T14:57:23.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vm0026fmnigqy2d81b/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vm0026fmnigqy2d81b/","excerpt":"用户使用git时的使用免密拉取和上传，修改免密设置，取消免密设置","text":"用户使用git时的使用免密拉取和上传，修改免密设置，取消免密设置 第一次输入密码之后自动免密1# git 默认即支持首次输入用户名密码，后续自动记忆，使用免密设置 取消免密设置12git config --global --unset credential.helper store# 使用 --global 参数则全局生效，不适用则针对当前目录下的.git生效 设置免密12git config --global credential.helper store# 使用 --global 参数则全局生效，不适用则针对当前目录下的.git生效 适用场景12345678# 大多公司的账户密码考虑到安全性，隔段时间便会失效，需更改密码# 这个时候大多git默认已经记忆上次用户名和密码，且不用跳出输入用户和密码的弹窗# 1. 取消免密功能，使它能正确弹出用户名和密码框git config --global --unset credential.helper store# 2. 使用git拉取或提交代码，相当于首次提交 会自动弹出用户名密码弹窗，输入即可# 3. 再次打开免密功能，记忆第二步的用户名和密码git config --global credential.helper store win图形化修改git提交密码12# 设置路径# 控制面板 --&gt; 用户账号 --&gt; 凭据管理器 --&gt; windows凭据 --&gt; 修改对应的git地址的用户名和密码后保存即可 向博主反馈问题","categories":[{"name":"Git","slug":"Git","permalink":"https://wongqingbin.github.io/categories/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://wongqingbin.github.io/tags/git/"}]},{"title":"Charles","slug":"Charles/licenses","date":"2020-05-23T17:28:23.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1uh000afmnie26w516o/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1uh000afmnie26w516o/","excerpt":"Charles 注册码","text":"Charles 注册码 Charles 注册码12CCF4cfbb2ea5c75c77858 向博主反馈问题","categories":[{"name":"Charles","slug":"Charles","permalink":"https://wongqingbin.github.io/categories/Charles/"}],"tags":[{"name":"licenses","slug":"licenses","permalink":"https://wongqingbin.github.io/tags/licenses/"}]},{"title":"Mac安装并配置Jenkins","slug":"Jenkins/install","date":"2020-05-23T17:00:05.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1un000gfmnid7ce1xv5/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1un000gfmnid7ce1xv5/","excerpt":"Mac使用Homebrew包管理器安装并配置管理Jenkins","text":"Mac使用Homebrew包管理器安装并配置管理Jenkins mac安装Jenkins12345678910111213141516# 1. Mac安装JDK并配置环境变量# 2.安装Jenkinsbrew install jenkinsbrew services start jenkins # 命令会自动设置为开机启动brew services stop jenkinsbrew services restart jenkins# 局域网访问:# 使用brew安装jenkins会避免很多其他安装方式产生的用户权限问题，但是会将httpListenAddress默认设置为127.0.0.1，这样我们虽然可以在本地用localhost:8080访问，但是本机和局域网均无法用ip访问。解决办法为修改两个路径下的plist配置。并重启# ～/Library/LaunchAgents/homebrew.mxcl.jenkins.plist# /usr/local/opt/jenkins/homebrew.mxcl.jenkins.plist# 将上面两个plist中的httpListenAddress后的ip地址，修改为本机IP或者0.0.0.0即可。# 取消开机启动sudo launchctl unload -w /Library/LaunchDaemons/org.jenkins-ci.plist# 设置开机启动sudo launchctl load -w /Library/LaunchDaemons/org.jenkins-ci.plist 向博主反馈问题","categories":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://wongqingbin.github.io/categories/Jenkins/"}],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://wongqingbin.github.io/tags/jenkins/"}]},{"title":"interview","slug":"Interview/interview","date":"2020-05-23T16:41:05.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1uj000cfmnidmdv4vxl/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1uj000cfmnidmdv4vxl/","excerpt":"Interview","text":"Interview 基础篇123456789101112# 1. 冒泡排序def bubble_sort(data): for i in range(len(data)-1, -1, -1): flag = False for j in range(i): if data[j] &gt; data[j + 1]: data[j], data[j + 1] = data[j + 1], data[j] flag = True if not flag: break print('第&#123;0&#125;次排序: &#123;1&#125;'.format(len(data)-i, data)) return data 12345678# 2. 装饰器单例def singleton(cls, *args, **kwargs): _instance = &#123;&#125; def get_instance(): if cls not in _instance: _instance.setdefault(cls, cls(*args, **kwargs)) return _instance.get(cls) return get_instance 123456789101112################ sql# 添加insert into tablename(id,name) values(1,w)insert into tablename values(1,w)# 更新update tablename set 字段名='newvalue' where# 删除delete from tablename where# 查找select * from tablename where# 分组group by 字段名 having avg() 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899############# Linux# 查看进程ps -ef | grep 'kafka' # 显示PID# 杀死进程kill -9 PID# 实时查看日志后十行file.logtail -n 10 -f file.log # tail -f == tailf# 复制cp -a oldfile newfolder# 检查端口号是否被占用netstat -anp | grep 8080# mkdir 创建目录mkdir amkdir -p a/b/c # 创建多级目录时使用 -p 命令# rm 删除目录、文件rm -rf a/b/c f # 不提醒确认则删除 shell脚本中常用 r是目录也删除，递归删除rm -r a/b/c # 提醒用户是否确认删除 命令行使用# cat 查看文件# cat -n [文件名] -n 显示行号# cp 拷贝文件cp A.txt b.txtcp a b# echo $PATH# grepcat -n A.txt | grep filter # 只显示filter内容cat -n A.txt | grep -v filter # -v不显示filter内容# findfine /root -name A.txt# ps 查看进程PIDps -ef | grep mongo# kill -9 结束进程(根据PID)kill -9 [PID]# mvmv a.txt /a/b# netstat 检查端口是否被占用netstat -anp | grep 8080# yum search package# yum install package# yum uninstall package# sed 修改文本sed -e 's/oldstr/newstr/g' A.txt # 's'字符串 'g'全局替换# tartar -zcvf a.tar.gz /root/a #归档打包tar -zxvf a.tar.gz /root/a #解压缩# awk 处理带格式文件文本kill -9 `ps | grep bash | awk ' ' '&#123;print $1&#125;'` # === kill -9 PID# awk ' ' 空格分割字符串# awk '&#123;print $1&#125;' 打印或取值第一个# ` ` 代表执行代码块获取执行结果，优先执行# nohub 不挂起进行 命令行保护进程启动程序# head 从头开始查看文件前10行head -n 10 a.log# tailtail -n 10 a.log # 从末尾开始查看文件最后10行tail -f a.log # 实时查看末尾# less# more# touch、vi 创建文件touch a.txtvi a.sh# history 查看命令行的历史命令# chmod 赋权限chmod 777 A.txtchmod -x A.txt# x可执行权限 r只读 w写# rz 上传 yum install lrzsz# sz 下载# scp 文件传输# wcwc -l a/b/A.txt # 统计文件行数# dudu -sh A.txt # 查看文件大小du -sh /a/b # 查看目录大小 123456789 测试用例八大要素用例编号操作步骤测试标题重要级别前置条件测试输入所属模块预期结果 12345黑盒测试用例设计方法包括等价类划分法、边界值分析法、错误推测法、因果图法、判定表驱动法、正交试验设计法、功能图法、场景图法等。白盒子测试方法：（强度由低到高）语句覆盖、判定覆盖、条件覆盖、判定条件覆盖、条件组合覆盖、路径覆盖。测试人员经常用到的有等价类，边界值，场景法，因果图法。 向博主反馈问题","categories":[{"name":"Interview","slug":"Interview","permalink":"https://wongqingbin.github.io/categories/Interview/"}],"tags":[{"name":"interview","slug":"interview","permalink":"https://wongqingbin.github.io/tags/interview/"}]},{"title":"Jenkins部署Python","slug":"Jenkins/xargs","date":"2020-05-23T16:30:19.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1up000ifmni88xygd3l/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1up000ifmni88xygd3l/","excerpt":"Jenkins部署 - 使用shell脚本后台守护进程运行","text":"Jenkins部署 - 使用shell脚本后台守护进程运行 示例1234567891011121314151617181920212223242526272829303132333435#!/bin/bash# 保证程序后台运行不杀死 和 nohub、&amp; 一同使用BUILD_ID=dontKillMe# source /root/.bash_profile# 停止服务(先杀死Python当前运行的进程)# ps -ef | grep python3 | grep -v grep | awk -F ' ' '&#123;print $2&#125;' | xargs kill -9pid=`ps -ef | grep python3 | grep -v grep | awk -F ' ' '&#123;print $2&#125;'`for p in $&#123;pid[@]&#125;;do kill -9 $pdone# 删除目录if [ -d /root/Jenkins/production ];then rm -rf /root/Jenkins/productionfi# 创建新部署目录mkdir -p /root/Jenkins/production# 进入部署目录cd /root/Jenkins/production# 拉取代码git clone &lt;url&gt;# 进入cd &lt;proj_path&gt;# 启动 BUILD_ID=dontKillMe 保证程序后台运行不杀死 和 nohub、&amp; 一同使用nohup python3 app.py &gt;/dev/null 2&gt;&amp;1 &amp; 向博主反馈问题","categories":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://wongqingbin.github.io/categories/Jenkins/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://wongqingbin.github.io/tags/shell/"}]},{"title":"CentOS 7 firewalld","slug":"Linux/firewalld","date":"2020-05-20T14:56:02.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1v1000zfmni7g759k8o/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1v1000zfmni7g759k8o/","excerpt":"CentOS 7 通过防火墙开放指定端口","text":"CentOS 7 通过防火墙开放指定端口 firewall-cmd12345678910111213141516# 查看开通端口列表firewall-cmd --list-ports# 开放80端口firewall-cmd --permanent --zone=public --add-port=80/tcp# 关闭80端口firewall-cmd --zone=public --remove-port=80/tcp --permanent# 重启防火墙生效systemctl restart firewalld# PS:# firewalld配置的防火墙策略也分为两种模式# 1、runtime，当前生效，重启后失效# 2、permanent，当前失效，重启后生效，为了让permanet生效，一般会执行friewall-cmd --reload，使其立即生效 说明 Linux上新的防火墙软件，和iptables差不多的工具。firewalld是centos7的一大特性，两大优点：支持动态更新，不用重启服务；加入了防火墙的“zone”概念。 firewalld能动态修改单条规则，不像iptables，修改规则后必须全部刷新才能生效。 firewalld在使用上要比iptables人性化很多。firewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netfilter来实现，也就是说firewalld和iptables一样，他们的作用都是用于维护规则，而真正使用规则干活的是内核的netfilter。 rpm -qa | grep firewalld | 查看是否安装 yum install firewalld 安装 rpm -qa | grep firewall-config 查看是否安装图形界面 yum install firewall-config 如果需要图形界面的话，需要安装 systemctl start firewalld 启动 systemctl restart firewalld 重启 systemctl disable firewalld 停止 systemctl stop firewalld 禁用 systemctl status firewalld | - firewall-cmd --state 查看状态 firewall-cmd --list-ports 查看开通端口列表 firewall-cmd --zone=public --remove-port=80/tcp --permanent 关闭端口 firewall-cmd --permanent --zone=public --add-port=80/tcp 开通端口 firewall-cmd --get-default-zone 查看default zone firewall-cmd --get-active-zones 查看active zone 备注：--zone #作用域 --add-port=80/tcp #添加端口，格式为：端口/通讯协议 --permanent #永久生效，没有此参数重启后失效firewall防火墙默认的几个zone（由firewalld 提供的区域按照从不信任到信任的顺序排序） 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"firewalld","slug":"firewalld","permalink":"https://wongqingbin.github.io/tags/firewalld/"}]},{"title":"CentOS 7 安装 network","slug":"Linux/network","date":"2020-05-20T14:49:51.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1va001ffmni8mxwbhlp/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1va001ffmni8mxwbhlp/","excerpt":"CentOS 7网络配置(Mac虚拟机下的共享配置)","text":"CentOS 7网络配置(Mac虚拟机下的共享配置) 编辑网络配置文件123456789101112131415# 编辑配置文件ifcfg-eth0 ifcfg-eth1 ...vi /etc/sysconfig/network-scripts/ifcfg-eth0# 复制以下项DEVICE=eth0BOOTPROTO=staticNOBOOT=yesIPADDR=192.168.10.192NETMASK=255.255.252.0GATEWAY=192.168.10.254DNS1=192.168.10.3DNS2=223.6.6.6NM_CONTROLLED=no# 重启网络CentOS7网络后生效systemctl restart network 参数解读1234567891011121314151617181920212223# 注：这里面的IP地址，子网掩码，GATE ，DNS都按照主机的配置。# 之后，重启一下虚拟机应该就可以。# 之后，ping下主机IP地址，ping 下局域网其他主机IP地址，再ping下外网ip地址，可以的话就算成功##################################### 从dhcp改成staticBOOTPROTO=static# 从no改成yes。系统将在启动时自动开启该接口。ONBOOT=yes# 设置IP地址IPADDR=# 设置子网掩码NETMASK=# 设置网关GATEWAY=# 设置DNSDNS1=DNS2=# 表示该接口将通过该配置文件进行设置，而不是通过网络管理器进行管理NM_CONTROLLED=no#################################### 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"network","slug":"network","permalink":"https://wongqingbin.github.io/tags/network/"}]},{"title":"CentOS 7 时间时区调整","slug":"Linux/time","date":"2020-05-20T14:42:07.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vj001xfmnif3rfgj0n/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vj001xfmnif3rfgj0n/","excerpt":"CentOS 7 调整时间为中国时区时间","text":"CentOS 7 调整时间为中国时区时间 启用NTP同步123456789101112# 安装ntp服务yum install ntp# 开机启动服务systemctl enable ntpd# 启动服务systemctl start ntpd# 更改时区timedatectl set-timezone Asia/Shanghai# 启用ntp同步timedatectl set-ntp yes# 同步时间ntpq -p timedatectl 命令同步时区123456789101112131415161718192021222324# 读取时间 等同于 timedatectl statustimedatectl# 设置时间timedatectl set-time \"YYYY-MM-DD HH:MM:SS\"# 列出所有时区timedatectl list-timezones# 更改时区timedatectl set-timezone Asia/Shanghai# 或 ln -sf /usr/share/zoneinfor/Asia/Shanghai /etc/localtime设置是否与NTP服务器同步 //yes或者notimedatectl set-ntp yes# 将硬件时钟调整为与本地时钟一致hwclock --systohc --localtime 或 timedatectl set-local-rtc 1# 注，硬件时钟默认使用UTC时间，因为硬件时钟不能保存时区和夏令时调整，修改后就无法从硬件时钟中读取出准确标准时间，因此不建议修改。修改后系统会出现警告。# 将硬件时间设置成 UTChwclock --systohc --utc 或 timedatectl set-local-rtc 1# 显示硬件时间：hwclock --show# 设置硬件时间：hwclock --set --date ‘08/02/2012 12:00:00’# 将硬件时间同步到系统时间：hwclock --hctosys# 强制把系统时间写入CMOS：# clock -w 时钟概念 在CentOS 6版本，时间设置有date、hwclock命令，从CentOS 7开始，使用了一个新的命令timedatectl。 （1）UTC整个地球分为二十四时区，每个时区都有自己的本地时间。在国际无线电通信场合，为了统一起见，使用一个统一的时间，称为通用协调时(UTC, Universal Time Coordinated)。 （2）GMT格林威治标准时间 (Greenwich Mean Time)指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。(UTC与GMT时间基本相同，本文中不做区分) （3）CST中国标准时间 (China Standard Time)【GMT + 8 = UTC + 8 = CST】 （4）DST夏令时(Daylight Saving Time) 指在夏天太阳升起的比较早时，将时钟拨快一小时，以提早日光的使用。（中国不使用） 硬件时钟：RTC(Real-Time Clock)或CMOS时钟，一般在主板上靠电池供电，服务器断电后也会继续运行。仅保存日期时间数值，无法保存时区和夏令时设置。 系统时钟：一般在服务器启动时复制RTC时间，之后独立运行，保存了时间、时区和夏令时设置。 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"timedatectl","slug":"timedatectl","permalink":"https://wongqingbin.github.io/tags/timedatectl/"}]},{"title":"CentOS 7 安装 nginx","slug":"Linux/nginx","date":"2020-05-20T14:37:41.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vc001jfmni31k0cgam/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vc001jfmni31k0cgam/","excerpt":"CentOS 7 安装 nginx","text":"CentOS 7 安装 nginx 安装1234567891011121314151617# 安装依赖包 c编译gcc依赖yum install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel# 下载安装包wget -c https://nginx.org/download/nginx-1.12.0.tar.gz# 解压安装包tar -zxvf nginx-1.12.0.tar.gz# 进入安装包cd nginx-1.12.0# 编译预处理./configure# 编译并安装make &amp;&amp; make install# 进入nginx目录cd /usr/local/nginx/sbin/# 启动nginx ./nginx [-s stop|reload]./nginx -s reload -t 配置文件路径说明12345678# ./configure \\# --prefix=/etc/nginx \\# --sbin-path=/usr/sbin/nginx \\# --conf-path=/etc/nginx/nginx.conf \\# --error-log-path=/var/log/nginx/error.log \\# --http-log-path=/var/log/nginx/access.log \\# --pid-path=/var/run/nginx.pid \\# --lock-path=/var/run/nginx.lock 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://wongqingbin.github.io/tags/nginx/"}]},{"title":"CentOS 7 安装 mongodb","slug":"Linux/mongodb","date":"2020-05-20T14:32:33.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1v9001cfmni04h3ajko/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1v9001cfmni04h3ajko/","excerpt":"CentOS 7 安装 mongodb","text":"CentOS 7 安装 mongodb 安装12345678910111213141516# 创建 repo文件touch /etc/yum.repos.d/mongodb-org-4.0.repo# 配置 repo文件(复制以下内容到.repo文件)[mongodb-org-4.0]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb- org/4.0/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc# 安装sudo yum install -y mongodb-org# 编辑配置文件: 修改绑定地址为0.0.0.0vim /etc/mongod.conf# 启动、停止、重启service mongod start/stop/restart 配置12345678910111213141516171819202122# 1.修改数据和日志的存储位置# bin目录下增加mongodb.conf文件# 内容：port=27017dbpath=/usr/local/mongodb/data/logpath=/usr/local/mongodb/log/mongodb.logfork = true# 释义：# port: 数据库服务使用端口# dbpath: 数据存放的文件位置# logpath: 日志文件的存放位置# fork: 后台守护进程运行# 启动命令：./mongod -f mongodb.conf# 关闭方式：./mongo# &gt;# &gt;use admin# &gt;db.shutdownServer() 卸载1234# 卸载yum erase $(rpm -qa | grep mongodb-org)rm -r /var/log/mongodbrm -r /var/lib/mongo 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"https://wongqingbin.github.io/tags/mongodb/"}]},{"title":"CentOS 7 安装 kafka","slug":"Linux/kafka","date":"2020-05-20T14:27:38.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1v50017fmnibizs27az/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1v50017fmnibizs27az/","excerpt":"CentOS 7 安装 kafka，简单配置使用kafka","text":"CentOS 7 安装 kafka，简单配置使用kafka 安装1234# 下载安装包wget http://mirror.bit.edu.cn/apache/kafka/2.2.0/kafka_2.12-2.2.0.tgz# 解压安装包tar -xzf kafka_2.12-2.2.0.tgz 启动1234# 启动zookeeperbin/zookeeper-server-start.sh config/zookeeper.properties# 启动kafkabin/kafka-server-start.sh config/server.properties 测试12345678# 创建topicbin/kafka-topics.sh --create --bootstrap-server localhost:9092 -- replication-factor 1 --partitions 1 --topic test# 列出topicbin/kafka-topics.sh --list --bootstrap-server localhost:9092# 发送消息bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test# 接收消息bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 -- topic test --from-beginning 启动zookeeper1234# 1bin/zookeeper-server-start.sh config/zookeeper.properties# 2 守护进程启动方式 防止挂掉bin/zookeeper-server-start.sh -daemon config/zookeeper.properties 启动kafka1234# 1bin/kafka-server-start.sh config/server.properties# 2 守护进程启动方式 防止挂掉bin/kafka-server-start.sh -daemon config/server.properties 查看topic列表1bin/kafka-topics.sh --list --zookeeper localhost:2181 创建topic1bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test 生产者1bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test 消费者1bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning 关闭kafka1bin/kafka-server-stop.sh 关闭zookeeper1bin/zookeeper-server-stop.sh 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"kafka","slug":"kafka","permalink":"https://wongqingbin.github.io/tags/kafka/"}]},{"title":"CentOS 7  c 编译依赖安装","slug":"Linux/c","date":"2020-05-20T14:24:04.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1ut000pfmnidr6z9xgf/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1ut000pfmnidr6z9xgf/","excerpt":"Linux使用源码安装软件时，需要c编译时，首先安装c编译依赖","text":"Linux使用源码安装软件时，需要c编译时，首先安装c编译依赖 安装123456yum install gccyum install pcre-develyum install zlib zlib-develyum install openssl openssl-develyum install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"gcc","slug":"gcc","permalink":"https://wongqingbin.github.io/tags/gcc/"}]},{"title":"CentOS 7 安装 python","slug":"Linux/python","date":"2020-05-20T14:16:46.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1ve001nfmni1tfgh4ox/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1ve001nfmni1tfgh4ox/","excerpt":"CentOS 7 yum安装 python3.6","text":"CentOS 7 yum安装 python3.6 安装1234567891011121314# 安装依赖包yum install -y openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel# 下载安装包wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz# 解压安装包tar -xzvf Python-3.6.5.tgz# 进入安装目录cd Python-3.6.5# 新建/usr/local/python3mkdir /usr/local/python3# 编译预处理./configure --prefix=/usr/local/python3# 编译并安装make &amp;&amp; make install 修改Linux的Python版本默认为Python31234# Linux默认Python为2.7# 建立新安装的python3.6.5的软连接ln -s /usr/python/bin/python3 /usr/bin/python3ln -s /usr/python/bin/pip3 /usr/bin/pip3 python3添加环境变量12345vim ~/.bash_profile## PATH=$PATH:$HOME/bin:/opt/python3.6.5/bin # opt需修改为自己安装的Python所在目录# export PATHsource ~/.bash_profile 验证123python3 --versionpython --version 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/tags/python/"}]},{"title":"CentOS 7 安装 JDK","slug":"Linux/jdk","date":"2020-05-20T14:12:16.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1v40014fmnibj7derln/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1v40014fmnibj7derln/","excerpt":"CentOS 7 安装 JDK1.8 并配置环境变量","text":"CentOS 7 安装 JDK1.8 并配置环境变量 yum安装jdk1yum install java-1.8.0-openjdk* 配置环境变量123456789vim ~/.bash_profile# set java environment# JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.181-3.b13.el7_5.x86_64# PATH=$PATH:$JAVA_HOME/bin# CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar# export JAVA_HOME CLASSPATH PATHsource ~/.bash_profile 验证1java --version 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"jdk","slug":"jdk","permalink":"https://wongqingbin.github.io/tags/jdk/"}]},{"title":"curl发送HTTP请求","slug":"Linux/curl","date":"2020-05-20T13:58:19.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1uz000wfmnidsc62hwf/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1uz000wfmnidsc62hwf/","excerpt":"使用curl发送HTTP请求，用于简单验证接口连接性。","text":"使用curl发送HTTP请求，用于简单验证接口连接性。 GET 请求示例123456789101112131415# GET请求 -icurl -i &lt;url&gt;# 返回示例：# HTTP/1.0 200 OK# Content-Type: application/json# Content-Length: 151# Server: Werkzeug/0.8.3 Python/2.7.3# Date: Mon, 20 May 2013 05:21:50 GMT## &#123;# \"data\": &#123;# \"description\": \"Need to find a good Python tutorial on the web\",# &#125;,# \"code\": 200# &#125; POST 请求示例1234567891011121314# POST请求示例 -icurl -i -H \"Content-Type: application/json\" -X POST -d '&#123;\"data\":\"data\"&#125;' &lt;url&gt;# HTTP/1.0 201 Created# Content-Type: application/json# Content-Length: 104# Server: Werkzeug/0.8.3 Python/2.7.3# Date: Mon, 20 May 2013 05:56:21 GMT## &#123;# \"data\": &#123;# \"description\": \"Need to find a good Python tutorial on the web\",# &#125;,# \"code\": 200# &#125; curl 带密码请求123456789101112131415# -u username:password -i urlcurl -u miguel:python -i &lt;url&gt;# HTTP/1.0 200 OK# Content-Type: application/json# Content-Length: 316# Server: Werkzeug/0.8.3 Python/2.7.3# Date: Mon, 20 May 2013 06:46:45 GMT## &#123;# \"data\": &#123;# \"description\": \"Need to find a good Python tutorial on the web\",# &#125;,# \"code\": 200# &#125; 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"curl","slug":"curl","permalink":"https://wongqingbin.github.io/tags/curl/"}]},{"title":"ssh-keygen","slug":"Linux/ssh-keygen","date":"2020-05-20T00:05:10.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vh001ufmni80secqil/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vh001ufmni80secqil/","excerpt":"ssh-keygen简单用法本文主要针对ssh-keygen配置GitHub Pages使用ssh免密部署ssh秘钥登录特点：1.安全；2.免输密码。","text":"ssh-keygen简单用法本文主要针对ssh-keygen配置GitHub Pages使用ssh免密部署ssh秘钥登录特点：1.安全；2.免输密码。 安装1# ssh-keygen为ssh自带命令，Mac、Linux、Ubuntu等都自带 检查是否配置过ssh服务12345# mac、linux、ubuntucd ~/.sshls# id_rsa id_rsa.pub known_hosts# 如果有id_rsa id_rsa.pub，证明以前曾经配置过，如果忘记曾经配置过，请删除此两项 配置ssh12ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"# 后面全部enter，不选择任何选项，最后生成的秘钥为无密码密钥 查看公钥和私钥12345# 查看公钥cat ~/.ssh/id_rsa.pub# 查看私钥cat ~/.ssh/id_rsa 服务器配置公钥12345# 以github为例# 配置路径：Setting -&gt; SSH and GPG keys -&gt; New SSH key or Add SSH key# title可以随便起（尽量和自己的私钥所在电脑相关联）# Key: # 复制id_rsa.pub文件的全部内容# 最后保存即可 测试是否连通12# 以github为例ssh -T git@github.com 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"ssh-keygen","slug":"ssh-keygen","permalink":"https://wongqingbin.github.io/tags/ssh-keygen/"}]},{"title":"scp","slug":"Linux/scp","date":"2020-05-19T23:34:10.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vf001qfmniewk85gso/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vf001qfmniewk85gso/","excerpt":"Linux scp 命令用于 Linux 之间复制文件和目录。scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。scp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版。scp [可选参数] file_source file_target","text":"Linux scp 命令用于 Linux 之间复制文件和目录。scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。scp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版。scp [可选参数] file_source file_target 从本地复制到远程Linux12345# 复制文件1 (自动重命名)scp local_file remote_username@remote_ip:remote_file# 复制文件2 (无重命名)scp local_file remote_username@remote_ip:remote_folder# PS: 需要输入远程ssh登录的密码；如果未指定用户名，则需要输入用户名和密码 从远程Linux复制到本地12345# 复制文件1 (自动重命名)scp remote_username@remote_ip:remote_file local_file# 复制文件2 (无重命名)scp remote_username@remote_ip:remote_folder local_folder# PS: 需要输入远程ssh登录的密码；如果未指定用户名，则需要输入用户名和密码 复制文件夹12345678910111213141516171819202122# scp命令后加 -r 参数即可scp -rscp [可选参数] file_source file_target# 参数说明：# -1： 强制scp命令使用协议ssh1# -2： 强制scp命令使用协议ssh2# -4： 强制scp命令只使用IPv4寻址# -6： 强制scp命令只使用IPv6寻址# -B： 使用批处理模式（传输过程中不询问传输口令或短语）# -C： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）# -p：保留原文件的修改时间，访问时间和访问权限。# -q： 不显示传输进度条。# -r： 递归复制整个目录。# -v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。# -c cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。# -F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。# -i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。# -l limit： 限定用户所能使用的带宽，以Kbit/s为单位。# -o ssh_option： 如果习惯于使用ssh_config(5)中的参数传递方式，# -P port：注意是大写的P, port是指定数据传输用到的端口号# -S program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。 向博主反馈问题","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"}],"tags":[{"name":"scp","slug":"scp","permalink":"https://wongqingbin.github.io/tags/scp/"}]},{"title":"terminal","slug":"mac/terminal","date":"2020-05-16T18:27:16.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vv002vfmni2n9mhzoe/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vv002vfmni2n9mhzoe/","excerpt":"Mac终端terminal自动补全之忽略大小写","text":"Mac终端terminal自动补全之忽略大小写 自动补全忽略大小写（terminal）12345678# 终端中输入以下命令：$ nano .inputrc# 在里面粘贴一下语句后, Control+O 保存set completion-ignore-case onset show-all-if-ambiguous onTAB: menu-complete# PS: 需重启终端生效 向博主反馈问题","categories":[{"name":"Mac","slug":"Mac","permalink":"https://wongqingbin.github.io/categories/Mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://wongqingbin.github.io/tags/mac/"}]},{"title":"ipv6","slug":"mac/ipv6","date":"2020-05-16T18:23:52.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vu002rfmnibidmdvi7/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vu002rfmnibidmdvi7/","excerpt":"Mac系统关闭ipv6","text":"Mac系统关闭ipv6 Mac修改网络时遇到无法修改，需先关闭ipv612# commandnetworksetup -listallnetworkservices | sed 1d | xargs -I &#123;&#125; networksetup -setv6off &#123;&#125; 向博主反馈问题","categories":[{"name":"Mac","slug":"Mac","permalink":"https://wongqingbin.github.io/categories/Mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://wongqingbin.github.io/tags/mac/"}]},{"title":"Homebrew","slug":"mac/Homebrew","date":"2020-05-16T18:18:30.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vs002lfmni613a6j85/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vs002lfmni613a6j85/","excerpt":"mac提供包管理器的安装和使用(类似Ubuntu的apt，Linux的yum、pkg)","text":"mac提供包管理器的安装和使用(类似Ubuntu的apt，Linux的yum、pkg) Homebrew安装1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 简单使用123brew list packagebrew install &lt;package_name&gt;brew uninstall &lt;package_name&gt; 其他软件1234# 安装Cakebrew和LaunchRocketbrew cask install cakebrewbrew cask install launchrocket# PS：注意 launchrocket 只能管理Homebrew安装的服务，不支持源码下载安装的服务 向博主反馈问题","categories":[{"name":"Mac","slug":"Mac","permalink":"https://wongqingbin.github.io/categories/Mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://wongqingbin.github.io/tags/mac/"}]},{"title":"Finder","slug":"mac/Finder","date":"2020-05-16T18:04:43.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vq002hfmni5rvsezdl/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vq002hfmni5rvsezdl/","excerpt":"Finder 显示与隐藏 隐藏文件(.文件)","text":"Finder 显示与隐藏 隐藏文件(.文件) 命令行永久改变显示方式12345# 显示defaults write com.apple.finder AppleShowAllFiles -bool true; killall Finder# 隐藏defaults write com.apple.finder AppleShowAllFiles -bool false; killall Finder# PS: 输入完命令回车后，需重启Finder：左上角的苹果标志--&gt;强制退出--&gt;Finder--&gt;重新启动 临时显示/隐藏快捷键1command + shift + . 向博主反馈问题","categories":[{"name":"Mac","slug":"Mac","permalink":"https://wongqingbin.github.io/categories/Mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://wongqingbin.github.io/tags/mac/"}]},{"title":"Mac开启任何来源","slug":"mac/Mac开启任何来源","date":"2020-05-14T16:20:07.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1vt002ofmni2o0h281u/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1vt002ofmni2o0h281u/","excerpt":"Mac在macOS系统下，系统偏好设置中的“安全与隐私”默认已经去除了允许“任何来源”App的选项，如果不开启会直接影响到无法运行一些第三方应用。","text":"Mac在macOS系统下，系统偏好设置中的“安全与隐私”默认已经去除了允许“任何来源”App的选项，如果不开启会直接影响到无法运行一些第三方应用。 开启权限命令1234# 显示sudo spctl --status --master-disable# 隐藏sudo spctl --status --master-enable 向博主反馈问题","categories":[{"name":"Mac","slug":"Mac","permalink":"https://wongqingbin.github.io/categories/Mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://wongqingbin.github.io/tags/mac/"}]},{"title":"Bubble Sort","slug":"python/冒泡排序","date":"2020-05-11T15:08:10.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1w3003efmnifipb89kp/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1w3003efmnifipb89kp/","excerpt":"经典面试题---进阶版冒泡排序","text":"经典面试题---进阶版冒泡排序 常规版1234567891011121314151617#!/usr/bin/env python3# -*- coding: utf-8 -*-def foo(data): \"\"\"常规版\"\"\" for i in range(len(data)): for j in range(len(data)-i-1): if data[j] &gt; data[j+1]: data[j], data[j + 1] = data[j + 1], data[j] return dataif __name__ == '__main__': data = [3, 0, 5, 4, 2, 6, 8, 1, 9, 7] print(data) print(foo(data)) 进阶版1234567891011121314151617181920212223242526272829303132#!/usr/bin/env python3# -*- coding: utf-8 -*-def bubble_sort(data): \"\"\" 进阶版 最坏情况 时间复杂度 O(n**2) 最好情况 时间复杂度 O(n) 稳定排序法 空间复杂度最佳 只需要一个额外空间 适用于数据量小或有部分数据已经排过序的情况 :param data: :return: \"\"\" # i 倒序循环列表排序 for i in range(len(data)-1, -1, -1): flag = False # flag判断是否执行了交换操作 for j in range(i): # i 为倒序循环，所以j的最大值即是i 0～i if data[j] &gt; data[j + 1]: data[j], data[j + 1] = data[j + 1], data[j] flag = True # 执行过交换操作，把flag置为True if not flag: # 执行完一次扫描后，判断是否执行过交换操作，如果没有交换过数据，就表示此时数组已完成排序，故直接跳出循环 break print('第&#123;0&#125;次排序: &#123;1&#125;'.format(len(data)-i, data)) return dataif __name__ == '__main__': data = [3, 0, 5, 4, 2, 6, 8, 1, 9, 7] print(data) print(bubble_sort(data)) 向博主反馈问题","categories":[{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/categories/python/"}],"tags":[{"name":"interviewer","slug":"interviewer","permalink":"https://wongqingbin.github.io/tags/interviewer/"}]},{"title":"antdvp.vue-cli","slug":"vue/antdvp-vue-cli","date":"2020-05-06T17:32:13.000Z","updated":"2021-06-08T15:07:54.984Z","comments":true,"path":"ckpo6h1w6003ofmnianpagq0m/","link":"","permalink":"https://wongqingbin.github.io/ckpo6h1w6003ofmnianpagq0m/","excerpt":"ant-design-vue-pro 使用脚手架 vue-cli 创建项目","text":"ant-design-vue-pro 使用脚手架 vue-cli 创建项目 vue create 12345678910111213#npm install -g @vue/cli vue --version @vue/cli 4.3.1vue create &lt;my-project-name&gt;# Vue CLI v4.3.1# ? Please pick a preset: Manually select features# ? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter# ? Use history mode for router? (Requires proper server setup for index fallback in production) Yes# ? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less# ? Pick a linter / formatter config: Prettier# ? Pick additional lint features: Lint on save# ? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files# ? Save this as a preset for future projects? Yes# ? Save preset as: a-d-v-p Less、history123# Less: css加载器使用less，方便之后做主题颜色修改配置# history: 最终路由中不带#号，漂亮的url路由# In dedicated config files: 配置文件不堆积在package.json中；使用单独的配置文件vue.confi.js需手动新建 npm run serve123456# 验证第一步是否创建成功cd &lt;my-project-name&gt;npm run serve# 第二步 安装插件ant-design-vue 和 momentnpm i ant-design-vue moment vue.config.js12345678910111213141516171819202122232425262728# webpack配置之less-load引入mkdir vue.config.js# 修改vue.config.js文件，添加css内容module.exports = &#123; // less-load css: &#123; loaderOptions: &#123; less: &#123; // 这里的选项会传递给 less-loader javascriptEnabled: true &#125; &#125; &#125;# 组件和样式按需加载，优化减小前端加载流量# babel.config.js 文件配置module.exports = &#123; presets: [\"@vue/cli-plugin-babel/preset\"], plugins: [ [ \"import\", &#123; libraryName: \"ant-design-vue\", libraryDirectory: \"es\", style: true &#125; ] // `style: true` 会加载 less 文件 ]&#125;;# 安装插件 babel-plugin-importnpm i --save-dev babel-plugin-import 向博主反馈问题","categories":[{"name":"vue","slug":"vue","permalink":"https://wongqingbin.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://wongqingbin.github.io/tags/vue/"}]}],"categories":[{"name":"Git","slug":"Git","permalink":"https://wongqingbin.github.io/categories/Git/"},{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/categories/python/"},{"name":"vue","slug":"vue","permalink":"https://wongqingbin.github.io/categories/vue/"},{"name":"sql","slug":"sql","permalink":"https://wongqingbin.github.io/categories/sql/"},{"name":"appium","slug":"appium","permalink":"https://wongqingbin.github.io/categories/appium/"},{"name":"Linux","slug":"Linux","permalink":"https://wongqingbin.github.io/categories/Linux/"},{"name":"Kindle","slug":"Kindle","permalink":"https://wongqingbin.github.io/categories/Kindle/"},{"name":"Charles","slug":"Charles","permalink":"https://wongqingbin.github.io/categories/Charles/"},{"name":"Jenkins","slug":"Jenkins","permalink":"https://wongqingbin.github.io/categories/Jenkins/"},{"name":"Interview","slug":"Interview","permalink":"https://wongqingbin.github.io/categories/Interview/"},{"name":"Mac","slug":"Mac","permalink":"https://wongqingbin.github.io/categories/Mac/"}],"tags":[{"name":"git","slug":"git","permalink":"https://wongqingbin.github.io/tags/git/"},{"name":"pip","slug":"pip","permalink":"https://wongqingbin.github.io/tags/pip/"},{"name":"npm","slug":"npm","permalink":"https://wongqingbin.github.io/tags/npm/"},{"name":"mysql","slug":"mysql","permalink":"https://wongqingbin.github.io/tags/mysql/"},{"name":"appium","slug":"appium","permalink":"https://wongqingbin.github.io/tags/appium/"},{"name":"argparse","slug":"argparse","permalink":"https://wongqingbin.github.io/tags/argparse/"},{"name":"sqlite3","slug":"sqlite3","permalink":"https://wongqingbin.github.io/tags/sqlite3/"},{"name":"countdate","slug":"countdate","permalink":"https://wongqingbin.github.io/tags/countdate/"},{"name":"threading","slug":"threading","permalink":"https://wongqingbin.github.io/tags/threading/"},{"name":"Exception","slug":"Exception","permalink":"https://wongqingbin.github.io/tags/Exception/"},{"name":"celery","slug":"celery","permalink":"https://wongqingbin.github.io/tags/celery/"},{"name":"copy","slug":"copy","permalink":"https://wongqingbin.github.io/tags/copy/"},{"name":"Kindle","slug":"Kindle","permalink":"https://wongqingbin.github.io/tags/Kindle/"},{"name":"licenses","slug":"licenses","permalink":"https://wongqingbin.github.io/tags/licenses/"},{"name":"jenkins","slug":"jenkins","permalink":"https://wongqingbin.github.io/tags/jenkins/"},{"name":"interview","slug":"interview","permalink":"https://wongqingbin.github.io/tags/interview/"},{"name":"shell","slug":"shell","permalink":"https://wongqingbin.github.io/tags/shell/"},{"name":"firewalld","slug":"firewalld","permalink":"https://wongqingbin.github.io/tags/firewalld/"},{"name":"network","slug":"network","permalink":"https://wongqingbin.github.io/tags/network/"},{"name":"timedatectl","slug":"timedatectl","permalink":"https://wongqingbin.github.io/tags/timedatectl/"},{"name":"nginx","slug":"nginx","permalink":"https://wongqingbin.github.io/tags/nginx/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wongqingbin.github.io/tags/mongodb/"},{"name":"kafka","slug":"kafka","permalink":"https://wongqingbin.github.io/tags/kafka/"},{"name":"gcc","slug":"gcc","permalink":"https://wongqingbin.github.io/tags/gcc/"},{"name":"python","slug":"python","permalink":"https://wongqingbin.github.io/tags/python/"},{"name":"jdk","slug":"jdk","permalink":"https://wongqingbin.github.io/tags/jdk/"},{"name":"curl","slug":"curl","permalink":"https://wongqingbin.github.io/tags/curl/"},{"name":"ssh-keygen","slug":"ssh-keygen","permalink":"https://wongqingbin.github.io/tags/ssh-keygen/"},{"name":"scp","slug":"scp","permalink":"https://wongqingbin.github.io/tags/scp/"},{"name":"mac","slug":"mac","permalink":"https://wongqingbin.github.io/tags/mac/"},{"name":"interviewer","slug":"interviewer","permalink":"https://wongqingbin.github.io/tags/interviewer/"},{"name":"vue","slug":"vue","permalink":"https://wongqingbin.github.io/tags/vue/"}]}